{
	"system": {
		"enums": {
			"gender": [
				"men",
				"women"
			],
			"marital_status": [
				"single",
				"married",
				"isolated",
				"unknow"
			],
			"education": [
				"phd",
				"diploma",
				"associate_degree",
				"bachelors_degree",
				"masters"
			],
			"military_status": [
				"included",
				"end",
				"exemption-edu",
				"exemption-spo"
			]
		},
		"errors": {
			"server_error": "Server Error",
			"bad_request": "Bad Request",
			"url_not_found": "Url NotFound",
			"too_many_requests": "Too Many Requests",
			"not_valid_image_format": "The uploaded file is not an image",
			"not_valid_file_format": "The uploaded file format is invalid",
			"crop_file": "Error in resizing file",
			"upload_file": "Error in uploading file",
			"LIMIT_FILE_SIZE": "file is too large"
		},
		"auth": {
			"enums": {},
			"validations": {
				"pass_confirm_match": "Password and confirmation are not the same",
				"password_required": "The password field is required",
				"password_length": "The password field has a character limit",
				"first_name_required": "The first name field is required",
				"username_required": "The username field is required",
				"username_length": "The username field should greater than 5 and less than 10 character",
				"first_name_length": "The first name field has a character limit",
				"last_name_required": "The last name field is required",
				"last_name_length": "The last name field has a character limit",
				"mobile_required": "The mobile field is required",
				"mobile_pattern": "The mobile number entered is invalid",
				"username_wrong": "The username is wrong",
				"mobile_wrong": "The username is wrong"
			},
			"messages": {
				"user_successfully_created": "The account was created successfully",
				"success_login": "You have successfully logged into your account",
				"success_logout": "You have successfully logged out",
				"token_verified": "Token Verified",
				"username_exist": "The username already exists",
				"username_is_available": "The username is available"
			},
			"errors": {
				"user_already_exists": "There is already a user with this information",
				"invalid_credentials": "The username or password is incorrect",
				"username_notfound": "The username not found",
				"username_not_send": "The username not send",
				"token_not_same": "Token not same",
				"token_not_sended": "Authentication key not sent",
				"token_not_stored": "Authentication key not stored",
				"forbidden_access": "Forbidden Access!"
			}
		},
		"constant": {
			"messages": {
				"constant_list_found": "Constant successfully created"
			}
		},
		"company": {
			"enums": {},
			"validations": {
				"company_id_require": "company is required",
				"company_id_invalid": "company id invalid",
				"company_page_number": "company page must by number",
				"company_size_number": "company size must by number",
				"company_name_length": "company name length must greater than 3 character and less than 50 character",
				"company_description_length": "company description length must greater than 3 character and less than 100 character",
				"company_phone_length": "company description length must greater than 9 character and less than 12 character",
				"company_phone_number": "company phone should number",
				"company_address_length": "company address length must greater than 10 character and less than 200 character"
			},
			"messages": {
				"company_list_found": "Company list found",
				"company_successfully_created": "Company successfully created",
				"company_managers_found": "Company managers successfully founded",
				"company_found": "Company successfully founded",
				"company_resumes_found": "Company resumes successfully founded",
				"company_projects_found": "Company projects successfully founded",
				"company_successfully_updated": "Company successfully updated",
				"company_manager_successfully_created": "company manager successfully created",
				"company_successfully_activated": "company  successfully activated",
				"company_successfully_deactivated": "company  successfully deactivated",
				"company_manager_successfully_removed": "company manager successfully removed"
			},
			"errors": {
				"the_user_is_currently_an_manager_for_company": "The user is currently an manager for company",
				"the_user_is_not_manager_for_this_company": "This user is not  manager for this company",
				"the_owner_manager_cannot_be_deleted": "The owner manager cannot be deleted",
				"company_already_exists": "company name is duplicated, already exists",
				"company_notfound": "company not found",
				"company_deactivated_already": "company has deactivated already",
				"company_activated_already": "company has activated already",
				"company_deactivate_cant_set_manager": "cant set manager for deactivate company"
			}
		},
		"position": {
			"enums": {
				"level": [
					"senior",
					"mid",
					"junior"
				]
			},
			"validations": {
				"position_page_number": "position page must by number",
				"position_size_number": "position size must by number",
				"position_description_length": "position description must greater than 10 character and less than 100 character"
			},
			"messages": {
				"position_list_found": "position list",
				"position_found": "position found",
				"position_managers_found": "position managers successfully founded",
				"position_resumes_found": "Position resumes successfully founded",
				"position_successfully_deactivated": "position status successfully deactivated",
				"position_successfully_activated": "position status successfully activated",
				"position_successfully_created": "Position successfully created",
				"position_successfully_updated": "Position successfully updated",
				"position_successfully_deleted": "Position successfully deleted"
			},
			"errors": {
				"position_notfound": "position not found",
				"position_already_exists": "position already exists",
				"position_list_found": "position list",
				"position_found": "position found",
				"position_managers_found": "position managers successfully founded",
				"position_resumes_found": "Position resumes successfully founded",
				"position_deactivated_already": "position has deactivated already",
				"position_activated_already": "position has activated already",
				"the_user_is_currently_an_manager_for_position": "The user is currently an manager for position",
				"position_deactivate_cant_set_manager": "cant set manager for deactivate position"
			}
		},
		"project": {
			"enums": {},
			"validations": {
				"project_id_invalid": "project id invalid",
				"project_page_number": "project page must by number",
				"project_size_number": "project size must by number"
			},
			"messages": {
				"project_found": "Project Found",
				"project_successfully_created": "Project successfully Created",
				"project_successfully_updated": "Project successfully updated",
				"project_manager_successfully_updated": "Project manager successfully updated",
				"project_manager_successfully_deleted": "Project manager successfully deleted",
				"project_successfully_deleted": "project successfully deleted",
				"project_resumes_found": "Project resumes successfully founded",
				"project_managers_found": "Project managers successfully founded",
				"project_positions_found": "project positions successfully found",
				"project_successfully_deactivated": "project status successfully deactivated",
				"project_successfully_activated": "project status successfully activated"
			},
			"errors": {
				"the_user_is_currently_an_manager_for_project": "The user is currently an manager for project",
				"the_user_is_not_an_manager_for_project": "This user is not defined for the project",
				"the_owner_manager_cannot_be_deleted": "The owner manager cannot be deleted",
				"project_not_found": "Project not found",
				"project_already_attached_company": "Project already attached this company",
				"project_deactivated_already": "project has deactivated already",
				"project_activated_already": "project has activated already",
				"project_deactivate_cant_set_manager": "cant set manager for deactivate project"
			}
		},
		"resume": {
			"enums": {
				"status": [
					"pending",
					"call_review",
					"tech_review",
					"wait_reject",
					"rejected",
					"hired",
					"wait_hire"
				],
				"call_history_status": [
					"rejected",
					"answered",
					"busy",
					"wrong-number",
					"recall"
				],
				"hire_status": [
					"not_employed",
					"hired_on"
				]
			},
			"validations": {
				"company_id_required": "company  is required",
				"company_id_invalid": "company invalid",
				"project_id_required": "project is required",
				"project_id_invalid": "project invalid",
				"first_name_required": "first name is required",
				"first_name_length": "resume.validation.first_name_length",
				"last_name_required": "resume.validation.last_name_required",
				"last_name_length": "resume.validation.last_name_length",
				"gender_required": "resume.validation.gender_required",
				"gender_incorrect": "resume.validation.gender_incorrect",
				"email_required": "resume.validation.email_required",
				"email_invalid": "resume.validation.email_invalid",
				"birth_year_required": "resume.validation.birth_year_required",
				"birth_year_number": "resume.validation.birth_year_number",
				"birth_year_length": "resume.validation.birth_year_length",
				"marital_status_required": "resume.validation.marital_status_required",
				"marital_status_incorrect": "resume.validation.marital_status_incorrect",
				"mobile_required": "resume.validation.mobile_required",
				"residence_city_required": "resume.validation.residence_city_required",
				"residence_city_invalid": "resume.validation.residence_city_invalid",
				"work_city_required": "resume.validation.work_city_required",
				"work_city_invalid": "resume.validation.work_city_invalid",
				"education_required": "resume.validation.education_required",
				"education_incorrect": "resume.validation.education_incorrect",
				"major_required": "resume.validation.major_required",
				"major_length": "resume.validation.major_length",
				"result_required": "result is required",
				"military_status_incorrect_for_men": "military status is required for men",
				"result_incorrect": "result is incorrect",
				"calling_date_required": "calling_date is required",
				"calling_date_must_be_date": "calling_date must be date",
				"description_length": "description length must be between 0 and 1000",
				"call_history_recall_at_required": "recall_at is required",
				"call_history_recall_at_invalid": "recall_at must be date",
				"reject_reason_value_not_valid": "reject reason value is not valid",
				"reject_reason": "reject reason is required"
			},
			"messages": {
				"resume_successfully_created": "resume successfully created",
				"resume_status_successfully_updated": "resume successfully updated",
				"resume_call_history_successfully_created": "resume call history successfully created",
				"max_comment_length": "Comment has be between 5 and 1000 character",
				"resume_page_number": "resume page must by number",
				"resume_size_number": "resume size must by number"
			},
			"errors": {
				"resume_notfound": "Sorry, Resume not found",
				"resume_comments_no_content": "Sorry, This resume  don't have any comment",
				"resume_comments_notfound": "Sorry, Resume not have any comment",
				"can_not_update_status_to_current": "It is not possible to update the status to the current status",
				"can_not_save_hired_rejected_status": "It is not possible to update the status to the hired and rejected"
			}
		},
		"user": {
			"enums": {},
			"validations": {
				"user_page_number": "user page must be number",
				"user_size_number": "user size must be number"
			},
			"messages": {
				"user_founded": "user successfully found",
				"list_found": "the list of users",
				"password_changed": "User password successfully changed",
				"user_login_history_list": "user login history list"
			},
			"errors": {
				"user_notfound": "User not found",
				"password_length_not_confirm": "password length must be between 8-10",
				"password_cant_be_empty": "password cant be empty",
				"old_password_length_not_confirm": "old password length must be between 8-10",
				"old_password_cant_be_empty": "old password cant be empty",
				"incorrect_password": "The password is incorrect",
				"duplicate_password": "New password cant be duplicate with old password",
				"manager_is_banned": "banned user cant set for manager"
			}
		},
		"manager": {
			"enums": {},
			"validations": {},
			"messages": {
				"manager_successfully_created": "manager successfully set for position"
			},
			"errors": {
				"duplicate": "This manager set for this position already"
			}
		},
		"province": {
			"enums": {},
			"validations": {
				"province_page_number": "province page must by number",
				"province_size_number": "province size must by number",
				"province_id_invalid": "province id invalid"
			},
			"messages": {
				"province_list_found": "province list found",
				"city_list_found": "city list found"
			},
			"errors": {
				"province_notfound": "province notfound"
			}
		}
	},
	"auth": {
		"enums": {},
		"validations": {
			"pass_confirm_match": "Password and confirmation are not the same",
			"password_required": "The password field is required",
			"password_length": "The password field has a character limit",
			"first_name_required": "The first name field is required",
			"username_required": "The username field is required",
			"username_length": "The username field should greater than 5 and less than 10 character",
			"first_name_length": "The first name field has a character limit",
			"last_name_required": "The last name field is required",
			"last_name_length": "The last name field has a character limit",
			"mobile_required": "The mobile field is required",
			"mobile_pattern": "The mobile number entered is invalid",
			"username_wrong": "The username is wrong",
			"mobile_wrong": "The username is wrong",
			"email_required": "email is required",
			"email_invalid": "email is invalid"
		},
		"messages": {
			"user_successfully_created": "The account was created successfully",
			"success_login": "You have successfully logged into your account",
			"success_logout": "You have successfully logged out",
			"token_verified": "Token Verified",
			"username_exist": "The username already exists",
			"username_is_available": "The username is available",
			"authentication_code_sent_successfully": "Authentication code sent successfully"
		},
		"errors": {
			"user_already_exists": "There is already a user with this information",
			"invalid_credentials": "The username or password is incorrect",
			"username_notfound": "The username not found",
			"username_not_send": "The username not send",
			"token_not_same": "Token not same",
			"token_not_sended": "Authentication key not sent",
			"token_not_stored": "Authentication key not stored",
			"forbidden_access": "Forbidden Access!",
			"authentication_code_has_already_been_sent": "Your authentication code has already been sent",
			"authentication_has_already_been_done": "Authentication has already been done",
			"valid_authentication_code_was_not_found_for_you": "A valid authentication code was not found for you",
			"authentication_code_sent_is_invalid": "The authentication code sent is invalid",
			"your_mobile_has_been_successfully_verified": "Your mobile has been successfully verified",
			"error_sending_mobile_verification_code": "Error sending mobile verification code"
		}
	},
	"constant": {
		"messages": {
			"constant_list_found": "Constant successfully created"
		}
	},
	"company": {
		"enums": {},
		"validations": {
			"company_id_require": "company is required",
			"company_id_invalid": "company id invalid",
			"company_page_number": "company page must by number",
			"company_size_number": "company size must by number",
			"company_name_length": "company name length must greater than 3 character and less than 50 character",
			"company_description_length": "company description length must greater than 3 character and less than 100 character",
			"company_phone_length": "company description length must greater than 9 character and less than 12 character",
			"company_phone_number": "company phone should number",
			"company_address_length": "company address length must greater than 10 character and less than 200 character"
		},
		"messages": {
			"company_list_found": "Company list found",
			"company_successfully_created": "Company successfully created",
			"company_managers_found": "Company managers successfully founded",
			"company_found": "Company successfully founded",
			"company_resumes_found": "Company resumes successfully founded",
			"company_projects_found": "Company projects successfully founded",
			"company_successfully_updated": "Company successfully updated",
			"company_manager_successfully_created": "company manager successfully created",
			"company_successfully_activated": "company  successfully activated",
			"company_successfully_deactivated": "company  successfully deactivated"
		},
		"errors": {
			"the_user_is_currently_an_manager_for_company": "The user is currently an manager for company",
			"the_user_is_not_manager_for_this_company": "This user is not  manager for this company",
			"the_owner_manager_cannot_be_deleted": "The owner manager cannot be deleted",
			"company_already_exists": "company name is duplicated, already exists",
			"company_notfound": "company not found",
			"company_deactivated_already": "company has deactivated already",
			"company_activated_already": "company has activated already"
		}
	},
	"position": {
		"enums": {
			"level": [
				"senior",
				"mid",
				"junior"
			]
		},
		"validations": {
			"position_page_number": "position page must by number",
			"position_size_number": "position size must by number",
			"position_description_length": "position description must greater than 10 character and less than 100 character"
		},
		"messages": {
			"position_list_found": "position list",
			"position_found": "position found",
			"position_managers_found": "position managers successfully founded",
			"position_resumes_found": "Position resumes successfully founded",
			"position_successfully_deactivated": "position status successfully deactivated",
			"position_successfully_activated": "position status successfully activated",
			"position_successfully_created": "position successfully created"
		},
		"errors": {
			"position_notfound": "position not found",
			"position_already_exists": "position already exists",
			"position_not_found": "position not found",
			"position_list_found": "position list",
			"position_found": "position found",
			"position_managers_found": "position managers successfully founded",
			"position_resumes_found": "Position resumes successfully founded",
			"position_deactivated_already": "position has deactivated already",
			"position_activated_already": "position has activated already"
		}
	},
	"project": {
		"enums": {},
		"validations": {
			"project_id_invalid": "project id invalid",
			"project_page_number": "project page must by number",
			"project_size_number": "project size must by number"
		},
		"messages": {
			"project_found": "Project Found",
			"project_successfully_created": "Project successfully Created",
			"project_successfully_updated": "Project successfully updated",
			"project_manager_successfully_updated": "Project manager successfully updated",
			"project_manager_successfully_deleted": "Project manager successfully deleted",
			"project_successfully_deleted": "project successfully deleted",
			"project_resumes_found": "Project resumes successfully founded",
			"project_managers_found": "Project managers successfully founded",
			"project_positions_found": "project positions successfully found",
			"project_successfully_deactivated": "project status successfully deactivated",
			"project_successfully_activated": "project status successfully activated"
		},
		"errors": {
			"the_user_is_currently_an_manager_for_project": "The user is currently an manager for project",
			"the_user_is_not_an_manager_for_project": "This user is not defined for the project",
			"the_owner_manager_cannot_be_deleted": "The owner manager cannot be deleted",
			"project_not_found": "Project not found",
			"project_already_attached_company": "Project already attached this company",
			"project_deactivated_already": "project has deactivated already",
			"project_activated_already": "project has activated already",
			"disabled_company_create_project_error": "The selected company is currently deactivated and it is not possible to define a new project",
			"company_is_not_active": "The selected project company is currently disabled and it is not possible to define a new project"
		}
	},
	"resume": {
		"enums": {
			"status": [
				"pending",
				"call_review",
				"tech_review",
				"wait_reject",
				"rejected",
				"hired",
				"wait_hire",
				"end_cooperation"
			],
			"call_history_status": [
				"rejected",
				"answered",
				"busy",
				"wrong-number",
				"recall"
			],
			"hire_status": [
				"not_employed",
				"hired_on"
			],
			"reject_reason": [
				"user_busy_working",
				"user_withdrawal",
				"technically_rejected",
				"rejected_initial_interview",
				"not_matching_salary_with_position",
				"unresponsive_user"
			],
			"end_cooperation_reason": [
				"find_a_new_job",
				"retrenchment"
			]
		},
		"validations": {
			"company_id_required": "resume.validation.company_id_required",
			"company_id_invalid": "resume.validation.company_id_invalid",
			"project_id_required": "resume.validation.project_id_required",
			"project_id_invalid": "resume.validation.project_id_invalid",
			"first_name_required": "resume.validation.first_name_required",
			"first_name_length": "resume.validation.first_name_length",
			"last_name_required": "resume.validation.last_name_required",
			"last_name_length": "resume.validation.last_name_length",
			"gender_required": "resume.validation.gender_required",
			"gender_incorrect": "resume.validation.gender_incorrect",
			"email_required": "resume.validation.email_required",
			"email_invalid": "resume.validation.email_invalid",
			"birth_year_required": "resume.validation.birth_year_required",
			"birth_year_number": "resume.validation.birth_year_number",
			"birth_year_length": "resume.validation.birth_year_length",
			"marital_status_required": "resume.validation.marital_status_required",
			"marital_status_incorrect": "resume.validation.marital_status_incorrect",
			"mobile_required": "resume.validation.mobile_required",
			"residence_city_required": "resume.validation.residence_city_required",
			"residence_city_invalid": "resume.validation.residence_city_invalid",
			"work_city_required": "resume.validation.work_city_required",
			"work_city_invalid": "resume.validation.work_city_invalid",
			"education_required": "resume.validation.education_required",
			"education_incorrect": "resume.validation.education_incorrect",
			"major_required": "resume.validation.major_required",
			"major_length": "resume.validation.major_length",
			"result_required": "result is required",
			"result_incorrect": "result is incorrect",
			"calling_date_required": "calling_date is required",
			"calling_date_must_be_date": "calling_date must be date",
			"description_length": "description length must be between 0 and 1000",
			"call_history_recall_at_required": "recall_at is required",
			"call_history_recall_at_invalid": "recall_at must be date",
			"rating_numeric": "rating must be number",
			"rating_number_not_correct": "rating number must be between 1 and 5",
			"rating_is_required": "rating is required",
			"max_tag_length": "tag has be between 5 and 100 character",
			"max_comment_length": "Comment has be between 5 and 1000 character",
			"resume_page_number": "resume page must by number",
			"resume_size_number": "resume size must by number",
			"how_to_cooperate_required": "how to cooperate is required",
			"how_to_cooperate_invalid": "how to cooperate is not valid",
			"hired_from_date_required": "from date required",
			"hired_from_date_must_be_date": "from date must be date",
			"hired_to_date_required": "to date required",
			"hired_to_date_must_be_date": "to date must be date",
			"income_required": "income required",
			"end_cooperation_date_required": "end cooperation date required",
			"end_cooperation_date_must_be_date": "end cooperation date must be date",
			"end_cooperation_reason_required": "end cooperation reason",
			"end_cooperation_reason_not_valid": "end cooperation reason not valid",
			"end_cooperation_description_length": "end cooperation description length must less than 100"
		},
		"messages": {
			"resume_successfully_created": "Resume successfully created",
			"resume_status_successfully_updated": "Resume successfully updated",
			"resume_call_history_successfully_created": "Resume call history successfully created",
			"resume_tags_successfully_updated": "Resume tags successfully updated",
			"resume_tags_successfully_deleted": "Resume tags successfully deleted",
			"resume_skills_successfully_updated": "Resume skills successfully updated",
			"resume_skills_successfully_deleted": "Resume skills successfully deleted",
			"resume_successfully_rejected": "Resume successfully rejected",
			"resume_successfully_hired": "Resume successfully hired",
			"resume_successfully_end_cooperation": "Resume successfully end of cooperation",
			"resume_already_rejected": "Resume already rejected"
		},
		"errors": {
			"resume_notfound": "Sorry, Resume not found",
			"resume_comments_no_content": "Sorry, This resume  don't have any comment",
			"resume_comments_notfound": "Sorry, Resume not have any comment",
			"can_not_update_status_to_current": "It is not possible to update the status to the current status",
			"tag_could_not_be_duplicate": "tag could not be duplicate",
			"skill_could_not_be_duplicate": "skill could not be duplicate",
			"tag_not_exists": "tag not exists",
			"skill_not_exists": "skill not exists",
			"from_date_must_be_before_to_date": "from date must be before to date",
			"resume_already_hired": "resume already hired",
			"resume_already_end_cooperation": "resume already end of cooperation",
			"you_can_set_end_cooperation_just_for_hired_resume": "you can set end cooperation just for hired resume"
		}
	},
	"user": {
		"enums": {},
		"validations": {
			"user_page_number": "user page must be number",
			"user_size_number": "user size must be number",
			"fcm_token_required": "fcm token required",
			"fcm_token_length": "fcm token length"
		},
		"messages": {
			"user_founded": "user successfully found",
			"list_found": "the list of users",
			"password_changed": "User password successfully changed",
			"user_login_history_list": "user login history list",
			"companies_founded": "user companies successfully found",
			"set_fcm_token_successfully": "set fcm token successfully",
			"unset_fcm_token_successfully": "unset fcm token successfully"
		},
		"errors": {
			"user_notfound": "User not found",
			"password_length_not_confirm": "password length must be between 8-10",
			"password_cant_be_empty": "password cant be empty",
			"old_password_length_not_confirm": "old password length must be between 8-10",
			"old_password_cant_be_empty": "old password cant be empty",
			"incorrect_password": "The password is incorrect",
			"duplicate_password": "New password cant be duplicate with old password",
			"email_already_exists": "this email is already exists",
			"username_already_exists": "this username is already exists",
			"fcm_token_already_exist": "fcm token already exist",
			"fcm_token_not_found": "fcm token not found",
			"fcm_token_expired": "fcm token expired"
		}
	},
	"manager": {
		"enums": {},
		"validations": {},
		"messages": {
			"manager_successfully_created": "manager successfully set for position"
		},
		"errors": {
			"duplicate": "This manager set for this position already"
		}
	},
	"interview": {
		"enums": {
			"event_type": [
				"online",
				"inperson",
				"inphone"
			],
			"status": [
				"pending",
				"done",
				"canceled"
			],
			"type": [
				"person",
				"personality"
			],
			"result": [
				"rejected",
				"accepted"
			]
		},
		"validations": {
			"interview_id_required": "interview id required",
			"interview_id_invalid": "interview id invalid",
			"resume_id_required": "resume id required",
			"resume_id_invalid": "resume id invalid",
			"event_time_required": "event time required",
			"event_time_invalid": "event time invalid",
			"event_time_should_after_today": "event time should after today",
			"event_time_should_before_next_year": "event time should before next year",
			"event_type_required": "event_type required",
			"event_type_invalid": "event_type invalid",
			"status_required": "status required",
			"status_incorrect": "status incorrect",
			"result_required": "result required",
			"result_incorrect": "result incorrect",
			"type_required": "type required",
			"type_invalid": "type invalid",
			"description_invalid": "Description most greater than 2 and less than 512 character",
			"contribution_invalid": "Contribution most array of id",
			"interview_page_number": "Intervciew page must by number",
			"interview_size_number": "Intervciew size must by number",
			"rating_numeric": "Rating must be number",
			"rating_number_not_correct": "Rating number must be between 1 and 5",
			"rating_is_required": "Rating is reauired"
		},
		"messages": {
			"interview_found": "Intervciew found",
			"interview_successfully_updated": "Intervciew successfully updated",
			"interview_successfully_deleted": "Intervciew successfully deleted"
		},
		"errors": {
			"interview_notfound": "Intervciew not found"
		}
	},
	"province": {
		"enums": {},
		"validations": {
			"province_page_number": "province page must by number",
			"province_size_number": "province size must by number"
		},
		"messages": {},
		"errors": {}
	},
	"tag": {
		"enums": {},
		"validations": {
			"tag_page_number": "tag page must by number",
			"tag_size_number": "tag size must by number",
			"tag_id_required": "tag id required",
			"tag_id_invalid": "tag id invalid",
			"skill_id_required": "Skill id required",
			"skill_id_invalid": "Skill id invalid"
		},
		"messages": {
			"tag_list_found": "Tag list found",
			"tag_successfully_created": "Tag successfully created"
		},
		"errors": {
			"duplicate": "Tag could not be duplicate"
		}
	},
	"notification": {
		"enums": {
			"entity": [
				"companies",
				"projects",
				"positions",
				"resumes"
			],
			"step": [
				"update_status"
			],
			"list_state": [
				"all",
				"unseen",
				"observed"
			]
		},
		"validations": {
			"notification_page_number": "company page must by number",
			"notification_size_number": "company size must by number",
			"notification_unvalid_state_send": "unvalid state send"
		},
		"messages": {
			"title": {
				"update_status": "Resume status changed"
			},
			"body": {
				"update_status": "{{user}} change status to {{status}}"
			},
			"notification_list_found": "notification list",
			"notification_list_seen": "notification list observed"
		},
		"errors": {}
	}
}