 
#-------------------------------------------#
#         Conditional statements            #
#-------------------------------------------#
workflow:
  rules:
    #- if: $CI_PIPELINE_SOURCE
    #- if: $CI_COMMIT_BRANCH == "develop" #|| $CI_COMMIT_BRANCH == "main"
    #- if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push"
     # when: always
    #- if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "feature/CVMAN-DevOps-1"
     # when: always
    #- when: never
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push") && ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "develop" || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master")
      when: always
   # - if: 
     # when: never
     #$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main" $CI_COMMIT_BRANCH
    - when: never

#-------------------------------------------#
#             Stages of pipeline            #
#-------------------------------------------#
stages:
  - start child pipelines
  - build
  - test
  - push
  - deploy
  - rollback

#-------------------------------------------#
#     Variables used throughout pipeline    #
#-------------------------------------------#
variables:
  WORKING_DIR: "/app/cvmanager" 
  NODE_ENV: "development" 

.cvmanager:
  stage: start child pipelines
  variables:
    CHILD_PIPELINE_EXECUTION_CONTEXT: "$WORKING_DIR"
  trigger:
    include: .gitlab-ci.yml
    strategy: depend

#-------------------------------------------#
#        pulls or clones the project        #
#-------------------------------------------#
.clone:
  stage: .pre
  only:
    - master
    - develop 
  script:
    - cd $WORKING_DIR
    - if sudo bash -c "cd backend"; then cd backend ; sudo git pull; else sudo git clone --branch=develop git@git.favin.ir:cvmanager/backend.git; fi 
  tags:
    - shared
    - cv


#-------------------------------------------#
#             Builds the image              #
#-------------------------------------------#
build:
  stage: build
  script:
    #- cd $WORKING_DIR/backend/api
    - echo "Building the image...."
    - docker build -t img:back-v1.$CI_PIPELINE_IID -t img:back-latest .
  #  - chmod +x check.sh
  #  - ./check.sh
  #artifacts:
    #reports:
     # junit: report.xml # this is the JUnit report file
    
    # --build-arg NODE_ENV=$NODE_ENV 
  tags:
    - shared
    - cv
  


#-------------------------------------------#
#              Runs the tests               # 
#-------------------------------------------#
test:
  stage: test
  before_script:
    - wget -nc https://pool.favin.ir/var/{.env,google-application-credentials.json,.env_mongo}
  script:
    - docker compose up -d
    - docker exec cv_app npm run test
  allow_failure: true
  tags:
    - shared
    - cv
  needs:
    - build

#-------------------------------------------#
#         Pushes the latest version         #
#-------------------------------------------#
push:
  stage: push
  only:
    - master
  script:
    - docker tag img:back-v1.$CI_PIPELINE_IID cvmanager/img:back-latest
    - docker push cvmanager/img:back-latest
  allow_failure: true
  tags:
    - shared
    - cv
  needs:
    - test

#-------------------------------------------#
#         Deploys the latest version        #
#-------------------------------------------#
deploy:
  stage: deploy
  only:
    - master
  before_script:
    - cd /app/cvmanager/backend
    - wget -nc https://pool.favin.ir/var/{.env,google-application-credentials.json,.env_mongo}
  script:
    - docker compose up -d
  environment: develop
  tags:
    - shared
    - cv
  needs: 
    - push
  when: manual

#-------------------------------------------#
#     Rollbacks to last stable version      #
#-------------------------------------------#
rollback:
  stage: deploy
  only:
    - master
  before_script:
    - cd /app/cvmanager/backend
    - docker tag cvmanager/img:back-v1.$CI_PIPELINE_IID cvmanager/img:back-latest
    - docker push cvmanager/img:back-latest
  script:
    - docker compose up -d
  environment: develop
  tags:
    - shared
    - cv
  when: manual
