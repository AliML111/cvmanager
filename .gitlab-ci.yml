# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
#workflow:
  #rules:
    #- if: $CI_PIPELINE_SOURCE == 'merge_request_evzent'
    #- if: $CI_COMMIT_BRANCH == 'main'
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml




  

workflow:
  rules:
    #- if: $CI_PIPELINE_SOURCE
    #- if: $CI_COMMIT_BRANCH == "develop" #|| $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "push"
      when: always
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "feature/CVMAN-DevOps-1"
      when: always
    - when: never

stages:
  - build
  - test
  - push
  - deploy
  - rollback


variables:
  WORKING_DIR: "/app/cvmanager"
 # NODE_ENV: "development"
clone:
  stage: .pre
  only:
    - master
    - develop 
    - feature/CVMAN-DevOps-1
  script:
    - cd $WORKING_DIR
    - if sudo bash -c "cd backend"; then cd backend ; sudo git pull; else sudo git clone --branch=feature/CVMAN-DevOps-1 git@git.favin.ir:cvmanager/backend.git; fi 
  tags:
    - shared
    - test

build:
  stage: build
  only:
    - master
    - develop
  script:
    - echo "Building the image...."
    - docker build -t img:back-v1.$CI_PIPELINE_IID -t img:back-latest .
    - chmod +x check.sh
    - ./check.sh
  artifacts:
    reports:
      junit: report.xml # this is the JUnit report file
    
    # --build-arg NODE_ENV=$NODE_ENV 
  #tags:
  #  - fedora
  #  - shared
  tags:
    - shared
    - test

test:
  stage: test
  only:
    - master
    - develop
  before_script:
    #- git pull
    - cd /app/cvmanager/backend
    - sudo wget -nc https://api.s3bucket.cloud/env/{.env,google-application-credentials.json,.env_mongo}
  script:
    - cd /app/cvmanager/backend
    - docker compose up -d
    - chmod +x check2.sh
    - ./check2.sh
  artifacts:
    reports:
      junit: $WORKING_DIR/backend/report.xml # this is the JUnit report file
    #- docker exec cv_app npm run test
  tags:
    - test
    - shared
  needs:
    - build

push:
  stage: push
  only:
    - master
    - develop
  script:
    - docker tag img:back-v1.$CI_PIPELINE_IID cvmanager/img:back-latest
    - docker push cvmanager/img:back-latest
    
  tags:
    - test
    - shared
  allow_failure: true
  needs:
    - test
  #when: manual

deploy:
  stage: deploy
  only:
    - master
    - develop
  before_script:
    - cd /app/cvmanager/backend
    - sudo git pull
    - sudo wget -nc https://api.s3bucket.cloud/env/{.env,google-application-credentials.json,.env_mongo}
  script:
    - docker compose up -d
  environment: develop
  tags:
    - test
    - shared
  needs: 
    - push
  when: manual

rollback:
  stage: rollback
  only:
    - master
    - develop
  before_script:
    - cd /app/cvmanager/backend
    - docker tag cvmanager/img:back-v1.$CI_PIPELINE_IID cvmanager/img:back-latest
    - docker push cvmanager/img:back-latest
  script:
    - docker compose up -d
  environment: develop
  tags:
    - test
    - shared
  when: manual
